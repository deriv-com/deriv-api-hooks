import { TSocketEndpointNames, TSocketRequestPayload } from './api.types';

export interface GenericResponse<T extends TSocketEndpointNames> {
    /**
     * Echo of the request made.
     */
    echo_req: TSocketRequestPayload<T>;
    /**
     * Action name of the request made.
     */
    msg_type: T;
    /**
     * Optional field sent in request to map to response, present only when request contains `req_id`.
     */
    req_id?: number;
    [k: string]: unknown;
}

export interface AccountClosureRequest {
    /**
     * Must be `1`
     */
    account_closure: 1;
    /**
     * Reason for closing off accounts.
     */
    reason: string;
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface AccountClosureResponse extends GenericResponse<'account_closure'> {
    /**
     * If set to `1`, all accounts are closed.
     */
    account_closure?: 0 | 1;
}

export interface AccountSecurityRequest {
    /**
     * Must be `1`
     */
    account_security: 1;
    /**
     * [Optional] OTP (one-time passcode) generated by a 2FA application like Authy, Google Authenticator or Yubikey.
     */
    otp?: string;
    /**
     * [Optional] Action to be taken for managing TOTP (time-based one-time password, RFC6238). Generate will create a secret key which is then returned in the secret_key response field, you can then enable by using that code in a 2FA application.
     */
    totp_action?: 'status' | 'enable' | 'disable' | 'generate';
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface AccountSecurityResponse extends GenericResponse<'account_security'> {
    /**
     * The information of 2-Factor authentication.
     */
    account_security?: {
        /**
         * TOTP information.
         */
        totp: {
            /**
             * Determines whether the 2-Factor authentication is enabled.
             */
            is_enabled: 0 | 1;
            /**
             * The secret key for the 2-Factor authentication.
             */
            secret_key: string;
        };
    };
}

export interface AccountStatisticsRequest {
    /**
     * Must be `1`
     */
    account_statistics: 1;

    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface AccountStatisticsResponse extends GenericResponse<'account_statistics'> {
    /**
     * Response of account statistics
     */
    account_statistics: {
        /**
         * Currency of an account
         */
        currency: string;

        /**
         * Sum of all deposits of an account
         */
        total_deposits: number;

        /**
         * Sum of all withdrawals of an account
         */
        total_withdrawals: number;
    };
}

export interface AffiliateAddPersonRequest {
    /**
     * [Required] Must be `1`
     */
    affiliate_add_person: 1;

    /**
     * City name within 50 characters.
     */
    address_city: string;

    /**
     * Within 20 characters and may not contain '+'.
     */
    address_postcode: string;

    /**
     * Possible value receive from `states_list` call.
     */
    address_state: string;

    /**
     * Within 70 characters, with no leading whitespaces and may contain letters/numbers and/or any of following characters '.,:;()@#/-"
     */
    address_street: string;

    /**
     * Country of citizenship, 2-letter country code.
     */
    citizenship: string;

    /**
     * Name of the country that currently reside, 2-letter country code.
     */
    country: string;

    /**
     * Currency of affiliate that wants to work with.
     */
    currency: string;

    /**
     * Birth date of affiliate user trying to register
     */
    date_of_birth: string;

    /**
     * The official first name of the affiliate. Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     */
    first_name: string;

    /**
     * The official last name of the affiliate. Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     */
    last_name: string;

    /**
     * Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).
     */
    non_pep_declaration: 1;

    /**
     * Password for the affiliate account. (Accepts any printable ASCII character. Must be between 6-50 characters, and include numbers, lowercase and uppercase letters.).
     */
    password: string;

    /**
     * Registered phone number of the affiliate. Starting with `+` followed by 8-35 digits, allowing hyphens or space.
     */
    phone: string;

    /**
     * Indicates client has agreed to the terms and conditions.
     */
    tnc_accepted: 1;

    /**
     * Indicates client has agreed to the terms and conditions for affiliates.
     */
    tnc_affiliate_accepted: 1;

    /**
     * Email verification code (received from a `verify_email` call, which must be done first).
     */
    verification_code: string;

    /**
     * [Optional] First line of address.
     */
    address_line_1?: string;

    /**
     * [Optional] Second line of address.
     */
    address_line_2?: string;

    /**
     * [Optional] Binary trading account.
     */
    bta?: number;

    /**
     * [Optional] Promote EU.
     */
    promote_eu?: 1;

    /**
     * [Optional] Receive marketing emails.
     */
    receive_marketing_emails?: 1;

    /**
     * [Optional] Social media URL.
     */
    social_media_url?: string;

    /**
     * [Optional] Website URL.
     */
    website_url?: string;

    /**
     * [Optional] Login ID.
     */
    loginid?: string;

    /**
     * [Optional] Passthrough data.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface AffiliateAddCompanyRequest {
    /**
     * [Required] Must be `1`
     */
    affiliate_add_company: 1;

    /**
     * City name within 50 characters.
     */
    address_city: string;

    /**
     * Within 20 characters and may not contain '+'.
     */
    address_postcode: string;

    /**
     * Possible value receive from `states_list` call.
     */
    address_state: string;

    /**
     * Within 70 characters, with no leading whitespaces and may contain letters/numbers and/or any of following characters '.,:;()@#/-.
     */
    address_street: string;

    /**
     * Country of citizenship, 2-letter country code.
     */
    citizenship: string;

    /**
     * Name of the company.
     */
    company_name: string;

    /**
     * Social media URL of the affiliate trying to register.
     */
    company_register_number: string;

    /**
     * Name of the country that currently reside, 2-letter country code.
     */
    country: string;

    /**
     * Currency of affiliate that wants to work with.
     */
    currency: string;

    /**
     * Birth date of affiliate user trying to register.
     */
    date_of_birth: string;

    /**
     * The official first name of the affiliate. Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     */
    first_name: string;

    /**
     * The official last name of the affiliate. Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     */
    last_name: string;

    /**
     * Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).
     */
    non_pep_declaration: 1;

    /**
     * Password for the affiliate account. (Accepts any printable ASCII character. Must be between 6-50 characters, and include numbers, lowercase and uppercase letters.).
     */
    password: string;

    /**
     * Registered phone number of the affiliate. Starting with `+` followed by 8-35 digits, allowing hyphens or space.
     */
    phone: string;

    /**
     * Indicates client is going to promote its account to EU or not.
     */
    promote_eu: 1;

    /**
     * Indicates client has agreed to receive marketing emails or not.
     */
    receive_marketing_emails: 1;

    /**
     * Social media URL of the affiliate trying to register.
     */
    social_media_url: string;

    /**
     * Indicates client has agreed to the terms and conditions.
     */
    tnc_accepted: 1;

    /**
     * Indicates client has agreed to the terms and conditions for affiliates.
     */
    tnc_affiliate_accepted: 1;

    /**
     * Email verification code (received from a `verify_email` call, which must be done first).
     */
    verification_code: string;

    /**
     * Social media URL of the affiliate trying to register.
     */
    website_url: string;

    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;

    /**
     * [Optional] BTA id field for master affiliate.
     */
    bta?: number;
}

export interface AffiliateAddCompanyResponse extends GenericResponse<'affiliate_add_company'> {
    /**
     * The information of the affiliate user trying to register.
     */
    affiliate_add_company: {
        /**
         * Postal code of the address.
         */
        address_postcode: string;

        /**
         * State / Region of the address.
         */
        address_state: string;

        /**
         * First line of address.
         */
        address_street: string;

        /**
         * Affiliate ID from CellXperts for the created affiliate
         */
        affiliate_id: string;

        /**
         * [Optional] BTA id field for master affiliate.
         */
        bta?: number;

        /**
         * Name of the company trying to register.
         */
        company_name: string;

        /**
         * Company registration number.
         */
        company_register_number: string;

        /**
         * Registered country of the created affiliate.
         */
        country: string;

        /**
         * Birth date of user trying to register
         */
        date_of_birth: string;

        /**
         * Demo(VRTC) created account details
         */
        demo: object;

        /**
         * First name of the created affiliate.
         */
        first_name: string;

        /**
         * Last name of the created affiliate
         */
        last_name: string;

        /**
         * PEP declaration status of the created affiliate.
         */
        non_pep_declaration: 0 | 1;

        /**
         * Registered phone number of the created affiliate.
         */
        phone: string;

        /**
         * Real created account details
         */
        real: object;

        /**
         * Terms and conditions acceptance status of the created affiliate.
         */
        tnc_accepted: 0 | 1;

        /**
         * Email verification code (received from a `verify_email` call, which must be done first).
         */
        verification_code: string;
    };
}

export interface AffiliateAddPersonResponse extends GenericResponse<'affiliate_add_person'> {
    /**
     * The information of the affiliate user trying to register.
     */
    affiliate_add_person: {
        /**
         * Postal code of the address.
         */
        address_postcode: string;

        /**
         * State / Region of the address.
         */
        address_state: string;

        /**
         * First line of address.
         */
        address_street: string;

        /**
         * Affiliate ID from CellXperts for the created affiliate
         */
        affiliate_id: string;

        /**
         * [Optional] BTA id field for master affiliate.
         */
        bta?: number;

        /**
         * Registered country of the created affiliate.
         */
        country: string;

        /**
         * Birth date of user trying to register
         */
        date_of_birth: string;

        /**
         * Demo(VRTC) created account details
         */
        demo: object;

        /**
         * First name of the created affiliate.
         */
        first_name: string;

        /**
         * Last name of the created affiliate
         */
        last_name: string;

        /**
         * PEP declaration status of the created affiliate.
         */
        non_pep_declaration: 0 | 1;

        /**
         * Registered phone number of the created affiliate.
         */
        phone: string;

        /**
         * Real created account details
         */
        real: object;

        /**
         * Terms and conditions acceptance status of the created affiliate.
         */
        tnc_accepted: 0 | 1;

        /**
         * Email verification code (received from a `verify_email` call, which must be done first).
         */
        verification_code: string;
    };
}

export interface AffiliateRegisterPersonRequest {
    /**
     * [Required] Must be `1`
     */
    affiliate_register_person: number;

    /**
     * City name within 50 characters.
     */
    address_city: string;

    /**
     * Possible value receive from `states_list` call.
     */
    address_state: string;

    /**
     * Within 70 characters, with no leading whitespaces and may contain letters/numbers and/or any of following characters '.,:;()@#/-.
     */
    address_street: string;

    /**
     * Commission plan selected by affiliate 2 RevShare, 4. Turnover.
     */
    commission_plan: number;

    /**
     * Name of the country that currently reside, 2-letter country code.
     */
    country: string;

    /**
     * Birth date of affiliate user trying to register.
     */
    date_of_birth: string;

    /**
     * Email address.
     */
    email: string;

    /**
     * The official first name of the affiliate. Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     */
    first_name: string;

    /**
     * The official last name of the affiliate. Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     */
    last_name: string;

    /**
     * Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).
     */
    non_pep_declaration: number;

    /**
     * Indicates client's self-declaration of being over 18 in age.
     */
    over_18_declaration: number;

    /**
     * Registered phone number of the affiliate. Starting with `+` followed by 8-35 digits, allowing hyphens or space.
     */
    phone: string;

    /**
     * Phone code without the starting + sign.
     */
    phone_code: string;

    /**
     * Indicates client has agreed to the terms and conditions.
     */
    tnc_accepted: number;

    /**
     * Indicates client has agreed to the terms and conditions for affiliates.
     */
    tnc_affiliate_accepted: number;

    /**
     * Account type select 1 business, 2 individual.
     */
    type_of_account: number;

    /**
     * Username of affiliate, will be unique everytime.
     */
    user_name: string;

    /**
     * Social media URL of the affiliate trying to register.
     */
    website_url: string;

    /**
     * Whatsapp phone number of the affiliate. Starting with `+` followed by 8-35 digits, allowing hyphens or space.
     */
    whatsapp_number: string;

    /**
     * Whatsapp code without the starting + sign.
     */
    whatsapp_number_phoneCode: string;

    /**
     * Within 20 characters and may not contain '+'.
     */
    address_postcode?: string;

    /**
     * Name of the country that the user is citizen of, 2-letter country code.
     */
    citizenship?: string;

    /**
     * Name of the company.
     */
    company_name?: string;

    /**
     * Registration number of the company.
     */
    company_registration_number?: string;

    /**
     * Currency of affiliate that wants to work with.
     */
    currency?: string;

    /**
     * Password for the affiliate account. (Accepts any printable ASCII character. Must be between 6-50 characters, and include numbers, lowercase and uppercase letters.).
     */
    password?: string;

    /**
     * Indicates client is going to promote its account to EU or not.
     */
    promote_eu?: number;

    /**
     * Indicates client has agreed to receive marketing emails or not.
     */
    receive_marketing_emails?: number;

    /**
     * Social media URL of the affiliate trying to register.
     */
    social_media_url?: string;

    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface AffiliateRegisterPersonResponse extends GenericResponse<'affiliate_register_person'> {
    /**
     * A message with affiliate user trying to register details
     */
    affiliate_register_person: {
        /**
         * Registered Affiliate ID
         */
        affiliate_user_id: string;

        /**
         * Affiliate was successfully added, 0:unsuccessful 1:successful
         */
        success: 0 | 1;
    };
}

export interface AvailableAccountsRequest {
    /**
     * Must be `1`
     */
    available_accounts: 1;
    /**
     * List of account categories that needs to received.
     */
    categories: 'wallet'[];
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field. Maximum size is 3500 bytes.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface AvailableAccountsResponse extends GenericResponse<'available_accounts'> {
    available_accounts?: {
        /**
         * Wallet account types that are available to be created
         */
        wallets: {
            /**
             * Account type of wallet
             */
            account_type: 'doughflow' | 'crypto' | 'paymentagent' | 'paymentagent_client' | 'p2p';
            /**
             * Currency of wallet
             */
            currency: string;
            /**
             * Landing Company of wallet.
             */
            landing_company: string;
        }[];
    };
}

export interface CashierPaymentsRequest {
    /**
     * Must be `1`
     */
    cashier_payments: 1;
    /**
     * [Optional] Cashier provider. `crypto` will be default option for crypto currency accounts.
     */
    provider?: 'crypto';
    /**
     * [Optional] If set to 1, will send updates whenever there is update to crypto payments.
     */
    subscribe?: 0 | 1;
    /**
     * [Optional] Type of transactions to receive.
     */
    transaction_type?: 'all' | 'deposit' | 'withdrawal';
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface CashierPaymentsResponse extends GenericResponse<'cashier_payments'> {
    cashier_payments?: {
        /**
         * Response for provider `crypto'.
         */
        crypto: {
            /**
             * The destination crypto address.
             */
            address_hash: string;
            /**
             * The URL of the address on blockchain.
             */
            address_url: string;
            /**
             * [Optional] The transaction amount. Not present when deposit transaction still unconfirmed.
             */
            amount?: number;
            /**
             * [Optional] The number of confirmations for pending deposits or withdrawals.
             */
            confirmations?: number;
            /**
             * The unique identifier for the transaction.
             */
            id: string;
            /**
             * [Optional] Boolean value: 1 or 0, indicating whether the transaction can be cancelled. Only applicable for `withdrawal` transactions.
             */
            is_valid_to_cancel?: 1 | 0;
            /**
             * The status code of the transaction.
             * Possible values for **deposit:** `PENDING|CONFIRMED|ERROR`,
             * possible values for **withdrawal:** `LOCKED|VERIFIED|REJECTED|PERFORMING_BLOCKCHAIN_TXN|PROCESSING|SENT|ERROR|CANCELLED|REVERTING|REVERTED`.
             */
            status_code:
                | 'CANCELLED'
                | 'CONFIRMED'
                | 'ERROR'
                | 'LOCKED'
                | 'PENDING'
                | 'PERFORMING_BLOCKCHAIN_TXN'
                | 'PROCESSING'
                | 'REJECTED'
                | 'REVERTED'
                | 'REVERTING'
                | 'SENT'
                | 'VERIFIED';
            /**
             * The status message of the transaction
             */
            status_message: string;
            /**
             * The epoch of the transaction date
             */
            submit_date: number;
            /**
             * [Optional] The transaction hash when available.
             */
            transaction_hash?: string;
            /**
             * The type of the transaction.
             */
            transaction_type: 'deposit' | 'withdrawal';
            /**
             * [Optional] The URL of the transaction on blockchain if `transaction_hash` is available.
             */
            transaction_url?: string;
        }[];
    };
    subscription?: {
        /**
         * A per-connection unique identifier. Can be passed to the `forget` API call to unsubscribe.
         */
        id: string;
    };
    /**
     * Echo of the request made.
     */
    echo_req: {
        [k: string]: unknown;
    };
    /**
     * Action name of the request made.
     */
    msg_type: 'cashier_payments';
    /**
     * Optional field sent in request to map to response, present only when request contains `req_id`.
     */
    req_id?: number;
    [k: string]: unknown;
}

export interface CashierWithdrawalCancelRequest {
    /**
     * Must be `1`
     */
    cashier_withdrawal_cancel: 1;
    /**
     * The unique identifier for the transaction.
     */
    id: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field. Maximum size is 3500 bytes.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface CashierWithdrawalResponse extends GenericResponse<'cashier_payments'> {
    cashier_withdrawal_cancel?: {
        /**
         * The unique identifier for the transaction.
         */
        id: string;
        /**
         * The status code of the cancellation.
         */
        status_code: 'CANCELLED';
    };
}

export interface ChangeEmailRequest {
    /**
     * Must be `verify` or `update`.
     */
    change_email: 'verify' | 'update';

    /**
     * Email address to be verified.
     */
    new_email: string;

    /**
     * [Optional] New password (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address). Mandatory if change_email is update and user has social login.
     */
    new_password?: string;

    /**
     * Email verification code (received from a `verify_email` call, which must be done first)
     */
    verification_code: string;

    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface ChangeEmailResponse extends GenericResponse<'change_email'> {
    /**
     * `1`: email changed successfully, `0`: failed to change email
     */
    change_email: 0 | 1;
}

export interface ChangePasswordRequest {
    /**
     * Must be `1`
     */
    change_password: 1;
    /**
     * New password (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address)
     */
    new_password: string;
    /**
     * Old password for validation (non-empty string, accepts any printable ASCII character)
     */
    old_password: string;
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface ChangePasswordResponse extends GenericResponse<'change_password'> {
    /**
     * If set to 1, password updated.
     */
    change_password?: 0 | 1;
}

export interface CreateJTokenRequest {
    /**
     * Must be `1`.
     */
    jtoken_create: 1;

    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface CreateJTokenResponse extends GenericResponse<'jtoken_create'> {
    /**
     * The JToken created.
     */
    jtoken_create: string;
}

export interface GetAccountTypesRequest {
    /**
     * Must be `1`
     */
    get_account_types: 1;
    /**
     * [Optional] Set to landing company to get relevant account types. If not set, this defaults to current account landing company
     */
    company?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field. Maximum size is 3500 bytes.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface GetAccountTypeResponse extends GenericResponse<'get_account_types'> {
    get_account_types?: {
        /**
         * Trading account types that are available to create or link to
         */
        trading: {
            /**
             * Details for trading account types
             *
             * This interface was referenced by `undefined`'s JSON-Schema definition
             * via the `patternProperty` "^(binary|dxtrade|mt5|standard)$".
             */
            [k: string]: {
                /**
                 * Wallet currencies allowed for this trading account
                 */
                allowed_wallet_currencies: string[];
                /**
                 * Can this trading account linked to another currency after opening
                 */
                linkable_to_different_currency: 0 | 1;
                /**
                 * Wallet types that this trading account can be linked to.
                 */
                linkable_wallet_types: string[];
            };
        };
        /**
         * Wallet accounts types that are available to create or link to
         */
        wallet: {
            /**
             * Details for wallets account types
             *
             * This interface was referenced by `undefined`'s JSON-Schema definition
             * via the `patternProperty` "^(affiliate|crypto|doughflow|p2p|paymentagent|paymentagent_client|virtual)$".
             */
            [k: string]: {
                /**
                 * Allowed currencies for creating accounts of this type; used or disallowed currencies are not listed.
                 */
                currencies: string[];
            };
        };
    };
}

export interface LinkWalletRequest {
    /**
     * Must be `1`.
     */
    link_wallet: 1;

    /**
     * The unique identifier for this trading account.
     */
    client_id: string;

    /**
     * The unique identifier for this wallet.
     */
    wallet_id: string;

    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface LinkWalletResponse extends GenericResponse<'link_wallet'> {
    /**
     * 1 on success
     */
    link_wallet: 1;
}

export interface NewAccountWalletRequest {
    /**
     * Must be `1`
     */
    new_account_wallet: 1;
    /**
     * Show whether client has accepted risk disclaimer.
     */
    accept_risk?: 0 | 1;
    /**
     * [Optional] Purpose and reason for requesting the account opening.
     */
    account_opening_reason?: 'Speculative' | 'Income Earning' | 'Hedging';
    /**
     * To set the wallets type - only doughflow and crptyo wallets are allowed for initial phase, other types will be added later
     */
    account_type: 'doughflow' | 'crypto';
    /**
     * [Optional] Within 35 characters.
     */
    address_city?: string;
    /**
     * [Optional] Mailing address.
     */
    address_line_1?: string;
    /**
     * [Optional] Within 70 characters.
     */
    address_line_2?: string;
    /**
     * [Optional] Within 20 characters and may not contain '+'.
     */
    address_postcode?: string;
    /**
     * [Optional] Possible value receive from `states_list` call.
     */
    address_state?: string;
    /**
     * [Optional] Country of legal citizenship, 2-letter country code. Possible value receive from `residence_list` call.
     */
    citizen?: string;
    /**
     * [Optional] Indicates whether this is for a client requesting an account with professional status.
     */
    client_type?: 'professional' | 'retail';
    /**
     * To set currency of the account. List of supported currencies can be acquired with `payout_currencies` call.
     */
    currency: string;
    /**
     * [Optional] Date of birth format: `yyyy-mm-dd`.
     */
    date_of_birth?: string;
    /**
     * Required for maltainvest
     */
    financial_assessment?: {
        /**
         * The anticipated account turnover.
         */
        account_turnover?:
            | 'Less than $25,000'
            | '$25,000 - $50,000'
            | '$50,001 - $100,000'
            | '$100,001 - $500,000'
            | 'Over $500,000';
        /**
         * How much experience do you have in CFD trading?
         */
        cfd_experience?: 'No experience' | 'Less than a year' | '1 - 2 years' | 'Over 3 years';
        /**
         * How many CFD trades have you placed in the past 12 months?
         */
        cfd_frequency?:
            | 'No transactions in the past 12 months'
            | '1 - 5 transactions in the past 12 months'
            | '6 - 10 transactions in the past 12 months'
            | '11 - 39 transactions in the past 12 months'
            | '40 transactions or more in the past 12 months';
        /**
         * In your understanding, CFD trading allows you to:
         */
        cfd_trading_definition?:
            | 'Purchase shares of a company or physical commodities.'
            | 'Place a bet on the price movement.'
            | 'Speculate on the price movement.'
            | 'Make a long-term investment.';
        /**
         * Level of Education.
         */
        education_level?: 'Primary' | 'Secondary' | 'Tertiary';
        /**
         * Industry of Employment.
         */
        employment_industry?:
            | 'Construction'
            | 'Education'
            | 'Finance'
            | 'Health'
            | 'Tourism'
            | 'Information & Communications Technology'
            | 'Science & Engineering'
            | 'Legal'
            | 'Social & Cultural'
            | 'Agriculture'
            | 'Real Estate'
            | 'Food Services'
            | 'Manufacturing'
            | 'Unemployed';
        /**
         * Employment Status.
         */
        employment_status?: 'Employed' | 'Pensioner' | 'Self-Employed' | 'Student' | 'Unemployed';
        /**
         * Estimated Net Worth.
         */
        estimated_worth?:
            | 'Less than $100,000'
            | '$100,000 - $250,000'
            | '$250,001 - $500,000'
            | '$500,001 - $1,000,000'
            | 'Over $1,000,000';
        /**
         * Income Source.
         */
        income_source?:
            | 'Salaried Employee'
            | 'Self-Employed'
            | 'Investments & Dividends'
            | 'Pension'
            | 'State Benefits'
            | 'Savings & Inheritance';
        /**
         * How does leverage affect CFD trading?
         */
        leverage_impact_trading?:
            | 'Leverage is a risk mitigation technique.'
            | 'Leverage prevents you from opening large positions.'
            | 'Leverage guarantees profits.'
            | "Leverage lets you open larger positions for a fraction of the trade's value.";
        /**
         * Leverage trading is high-risk, so it's a good idea to use risk management features such as stop loss. Stop loss allows you to
         */
        leverage_trading_high_risk_stop_loss?:
            | 'Cancel your trade at any time within a chosen timeframe.'
            | 'Close your trade automatically when the loss is more than or equal to a specific amount.'
            | 'Close your trade automatically when the profit is more than or equal to a specific amount.'
            | 'Make a guaranteed profit on your trade.';
        /**
         * Net Annual Income.
         */
        net_income?:
            | 'Less than $25,000'
            | '$25,000 - $50,000'
            | '$50,001 - $100,000'
            | '$100,001 - $500,000'
            | 'Over $500,000';
        /**
         * Occupation.
         */
        occupation?:
            | 'Chief Executives, Senior Officials and Legislators'
            | 'Managers'
            | 'Professionals'
            | 'Clerks'
            | 'Personal Care, Sales and Service Workers'
            | 'Agricultural, Forestry and Fishery Workers'
            | 'Craft, Metal, Electrical and Electronics Workers'
            | 'Plant and Machine Operators and Assemblers'
            | 'Cleaners and Helpers'
            | 'Mining, Construction, Manufacturing and Transport Workers'
            | 'Armed Forces'
            | 'Government Officers'
            | 'Students'
            | 'Unemployed';
        /**
         * When would you be required to pay an initial margin?
         */
        required_initial_margin?:
            | 'When opening a Leveraged CFD trade.'
            | 'When trading Multipliers.'
            | 'When buying shares of a company.'
            | 'All of the above.';
        /**
         * Do you understand that you could potentially lose 100% of the money you use to trade?
         */
        risk_tolerance?: 'Yes' | 'No';
        /**
         * How much knowledge and experience do you have in relation to online trading?
         */
        source_of_experience?:
            | 'I have an academic degree, professional certification, and/or work experience.'
            | 'I trade forex CFDs and other complex financial instruments.'
            | 'I have attended seminars, training, and/or workshops.'
            | 'I have little experience.'
            | 'I have no knowledge.';
        /**
         * [Optional] Source of wealth.
         */
        source_of_wealth?:
            | 'Accumulation of Income/Savings'
            | 'Cash Business'
            | 'Company Ownership'
            | 'Divorce Settlement'
            | 'Inheritance'
            | 'Investment Income'
            | 'Sale of Property';
        /**
         * How much experience do you have with other financial instruments?
         */
        trading_experience_financial_instruments?:
            | 'No experience'
            | 'Less than a year'
            | '1 - 2 years'
            | 'Over 3 years';
        /**
         * How many trades have you placed with other financial instruments in the past 12 months?
         */
        trading_frequency_financial_instruments?:
            | 'No transactions in the past 12 months'
            | '1 - 5 transactions in the past 12 months'
            | '6 - 10 transactions in the past 12 months'
            | '11 - 39 transactions in the past 12 months'
            | '40 transactions or more in the past 12 months';
    };
    /**
     * [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     */
    first_name?: string;
    /**
     * [Optional] Set the landing company of the wallet. Default value is 'svg' if company not provided
     */
    landing_company_short?: 'maltainvest' | 'svg';
    /**
     * [Optional] Within 2-50 characters, use only letters, spaces, hyphens, full-stops or apostrophes.
     */
    last_name?: string;
    /**
     * [Optional] Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed Person/Relatives and Close Associates).
     */
    non_pep_declaration?: number;
    /**
     * [Optional] Starting with `+` followed by 8-35 digits, allowing hyphens or space.
     */
    phone?: string;
    /**
     * Accept any value in enum list.
     */
    salutation?: 'Mr' | 'Ms' | 'Miss' | 'Mrs';
    /**
     * Tax identification number. Only applicable for real money account. Required for `maltainvest` landing company.
     */
    tax_identification_number?: string;
    /**
     * Residence for tax purpose. Comma separated iso country code if multiple jurisdictions. Only applicable for real money account. Required for `maltainvest` landing company.
     */
    tax_residence?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface NewAccountWalletResponse extends GenericResponse<'new_account_wallet'> {
    new_account_wallet?: {
        /**
         * Client ID of new real money account
         */
        client_id: string;
        /**
         * Currency of an account
         */
        currency?: string;
        /**
         * Landing company full name
         */
        landing_company: string;
        /**
         * Landing company shortcode
         */
        landing_company_short?: string;
        /**
         * Landing company shortcode
         */
        landing_company_shortcode?: string;
        /**
         * OAuth token for client's login session
         */
        oauth_token: string;
    };
}

export interface PasskeysListRequest {
    /**
     * Must be `1`
     */
    passkeys_list: 1;
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface PasskeysListResponse extends GenericResponse<'passkeys_list'> {
    /**
     * The list of passkeys.
     */
    passkeys_list: {
        /**
         * The epoch date when the passkey was created.
         */
        created_at: number;
        /**
         * The system id of the stored passkey.
         */
        id: number;
        /**
         * The epoch timestamp that the key was last used to authenticate the user.
         */
        last_used: number;
        /**
         * The descriptive name of the passkey.
         */
        name: string;
        /**
         * The id of the passkey credential.
         */
        passkey_id: string;
        /**
         * The name of the device where the credential is stored on.
         */
        stored_on: string;
    }[];
}

export interface PasskeysLoginRequest {
    /**
     * Must be `1`
     */
    passkeys_login: 1;
    /**
     * The public key credential returned from the authenticator.
     */
    publicKeyCredential: {
        /**
         * The authenticator attachment.
         */
        authenticatorAttachment?: string;
        /**
         * The client extension results.
         */
        clientExtensionResults: object;
        /**
         * The credential id. base64 encoded
         */
        id: string;
        /**
         * The raw credential id. base64 encoded should match id. (Optional)
         */
        rawId?: string;
        /**
         * The response from the authenticator.
         */
        response: {
            /**
             * The authenticator data. base64 encoded (Optional)
             */
            authenticatorData?: string;
            /**
             * The client data json. base64 encoded
             */
            clientDataJSON: string;
            /**
             * The signature. base64 encoded (Optional)
             */
            signature?: string;
            /**
             * The user handle
             */
            userHandle: string;
        };
        /**
         * The type of the credential.
         */
        type: string;
    };
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface PasskeysLoginResponse extends GenericResponse<'passkeys_login'> {
    /**
     * Wrapper of the response.
     */
    passkeys_login: {
        /**
         * The user id.
         */
        binary_user_id: number;
        /**
         * The Passkeys login status
         */
        verified: boolean;
    };
}

export interface PasskeysOptionsRequest {
    /**
     * Must be `1`
     */
    passkeys_options: 1;
    /**
     * [Optional] The id of the passkey. If left unspecified, User can use any passkey to authorize.
     */
    passkey_id?: string;
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface PasskeysOptionsResponse extends GenericResponse<'passkeys_options'> {
    /**
     * Wrapper of the response.
     */
    passkeys_options: {
        /**
         * Wrapper of the options.
         */
        publicKey: {
            /**
             * List of credentials that are already registered. Only listed credentials are allowed to authenticate.
             */
            allowCredentials: {
                /**
                 * The credential id. base64 encoded.
                 */
                id: string;
                /**
                 * The transports supported by the authenticator.
                 */
                transports: ('usb' | 'nfc' | 'ble' | 'smart-card' | 'hybrid' | 'internal')[];
                /**
                 * Will be always public-key.
                 */
                type: 'public-key';
            }[];
            /**
             * Random string to be signed by the authenticator. will be byte array base64 encoded.
             */
            challenge: string;
            /**
             * Empty for now.
             */
            extensions: Record<string, never>;
            /**
             * Relying party id.
             */
            rpId: string;
            /**
             * Time before expiring the ceremony in milliseconds.
             */
            timeout: number;
            /**
             * Ask the user to enter their authentication method (PIN, fingerprint, etc). Default is discouraged.
             */
            userVerification: 'required' | 'preferred' | 'discouraged';
        };
    };
}
export interface PasskeysRenameRequest {
    /**
     * Must be `1`
     */
    passkeys_rename: 1;
    /**
     * The id of the passkey to rename.
     */
    id: number;
    /**
     * The new name of the passkey.
     */
    name: string;
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface PasskeysRenameResponse extends GenericResponse<'passkeys_rename'> {
    /**
     * 1 on success
     */
    passkeys_rename: number;
}

export interface PasskeysRegisterOptionsRequest {
    /**
     * Must be `1`
     */
    passkeys_register_options: 1;
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface PasskeysRegisterOptionsResponse extends GenericResponse<'passkeys_register_options'> {
    /**
     * Wrapper of the response.
     */
    passkeys_register_options: {
        /**
         * Wrapper of the options.
         */
        publicKey: {
            /**
             * The attestation settings, whether the authenticator will attest the response or not. Default is direct.
             */
            attestation: 'none' | 'indirect' | 'direct';
            /**
             * Settings to control authenticator behavior and selection.
             */
            authenticatorSelection: {
                /**
                 * Whether to allow cross-platform authenticators (QR) or only the ones installed on the device itself.
                 */
                authenticatorAttachment: 'platform' | 'cross-platform';
                /**
                 * Ask the auth to save the passkey on the device. This will allow seamless login without the need to enter the username. Will be true always.
                 */
                requireResidentKey: boolean;
                /**
                 * Ask the auth to save the passkey on the device. This will allow seamless login without the need to enter the username. Will be true always.
                 */
                residentKey: string;
                /**
                 * Ask the user to enter their authentication method (PIN, fingerprint, etc). Default is required.
                 */
                userVerification: 'required' | 'preferred' | 'discouraged';
            };
            /**
             * Random string to be signed by the authenticator. Will be byte array base64 encoded.
             */
            challenge: string;
            /**
             * List of already registered credentials to avoid re-registering.
             */
            excludeCredentials: {
                /**
                 * The credential id. Base64 encoded.
                 */
                id: string;
                /**
                 * The transports supported by the authenticator.
                 */
                transports: ('usb' | 'nfc' | 'ble' | 'smart-card' | 'hybrid' | 'internal')[];
                /**
                 * Will be always public-key.
                 */
                type: 'public-key';
            }[];
            /**
             * Empty for now.
             */
            extensions: {
                credProps: boolean;
            };
            /**
             * Supported public key algorithms.
             */
            pubKeyCredParams: {
                /**
                 * Algorithm.
                 */
                alg: number;
                /**
                 * Type.
                 */
                type: string;
            }[];
            /**
             * The relying party info.
             */
            rp: {
                /**
                 * Relying party id.
                 */
                id: string;
                /**
                 * Relying party name.
                 */
                name: string;
            };
            /**
             * Time before expiring the ceremony in milliseconds.
             */
            timeout: number;
            /**
             * The user info.
             */
            user: {
                /**
                 * Display name of the user. Will be email.
                 */
                displayName: string;
                /**
                 * Binary user id.
                 */
                id: number;
                /**
                 * Name of the user, will be email.
                 */
                name: string;
            };
        };
    };
}

export interface PasskeysRegisterRequest {
    /**
     * Must be `1`
     */
    passkeys_register: 1;
    /**
     * The name of the passkey.
     */
    name: string;
    /**
     * The public key credential returned from the authenticator.
     */
    publicKeyCredential: {
        /**
         * The authenticator attachment.
         */
        authenticatorAttachment?: string;
        /**
         * The client extension results.
         */
        clientExtensionResults?: Record<string, any>;
        /**
         * The credential id. base64 encoded
         */
        id: string;
        /**
         * The raw credential id. base64 encoded should match id. (Optional)
         */
        rawId?: string;
        /**
         * The response from the authenticator.
         */
        response: {
            /**
             * The attestation object. base64 encoded
             */
            attestationObject: string;
            /**
             * The authenticator data. base64 encoded (Optional)
             */
            authenticatorData?: string;
            /**
             * The client data json. base64 encoded
             */
            clientDataJSON: string;
            /**
             * The public key. base64 encoded (Optional)
             */
            publicKey?: string;
            /**
             * The public key algorithm. (Optional)
             */
            publicKeyAlgorithm?: number;
            /**
             * The transports.
             */
            transports: string[];
        };
        /**
         * The type of the credential.
         */
        type: string;
    };
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface PasskeysRegisterResponse extends GenericResponse<'passkeys_register'> {
    /**
     * Wrapper of the response.
     */
    passkeys_register: {
        /**
         * The epoch timestamp when the passkey was created.
         */
        created_at: number;
        /**
         * The system id of the stored passkey.
         */
        id: number;
        /**
         * The epoch timestamp that the key was last used to authenticate the user.
         */
        last_used: number;
        /**
         * The descriptive name of the passkey.
         */
        name: string;
        /**
         * The id of the passkey credential.
         */
        passkey_id: string;
        /**
         * The name of the device where the credential is stored on.
         */
        stored_on: string;
    };
}

export interface PasskeysRevokeRequest {
    /**
     * Must be `1`
     */
    passkeys_revoke: 1;
    /**
     * The system id of the passkey.
     */
    id: number;
    /**
     * The public key credential returned from the authenticator.
     */
    publicKeyCredential: {
        /**
         * The authenticator attachment.
         */
        authenticatorAttachment: string;
        /**
         * The client extension results.
         */
        clientExtensionResults: Record<string, never>;
        /**
         * The credential id. base64 encoded
         */
        id: string;
        /**
         * The raw credential id. base64 encoded. Should match id (Optional)
         */
        rawId?: string;
        /**
         * The response from the authenticator.
         */
        response: {
            /**
             * The authenticator data. base64 encoded (Optional)
             */
            authenticatorData?: string;
            /**
             * The client data json. base64 encoded
             */
            clientDataJSON: string;
            /**
             * The signature. base64 encoded
             */
            signature: string;
            /**
             * The user handle. (Optional)
             */
            userHandle?: string;
        };
        /**
         * The type of the credential.
         */
        type: string;
    };
    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface PasskeysRevokeResponse extends GenericResponse<'passkeys_revoke'> {
    /**
     * The system id of the stored passkey.
     */
    passkeys_revoke: number;
}

export interface ReportRequest {
    /**
     * Must be `1`
     */
    request_report: 1;

    /**
     * Start date of the report
     */
    date_from: number;

    /**
     * End date of the report
     */
    date_to: number;

    /**
     * Type of report to be sent to client's registered e-mail address
     */
    report_type: 'statement';

    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface ReportRequestResponse extends GenericResponse<'request_report'> {
    /**
     * Response of request report
     */
    request_report: {
        /**
         * `1` indicates that report will be e-mailed, otherwise an error with error_code and error_message will be returned
         */
        report_status: number;
    };
}

export interface ResetPasswordRequest {
    /**
     * Must be `1`
     */
    reset_password: 1;

    /**
     * New password. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address).
     */
    new_password: string;

    /**
     * Email verification code (received from a `verify_email` call, which must be done first)
     */
    verification_code: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface ResetPasswordResponse extends GenericResponse<'reset_password'> {
    /**
     * `1`: password reset success, `0`: password reset failure
     */
    reset_password: 0 | 1;
}

export interface ServiceTokenRequest {
    /**
     * Must be `1`
     */
    service_token: 1;
    /**
     * [Optional] The 2-letter country code.
     */
    country?: string;
    /**
     * [Optional] The URL of the web page where the Web SDK will be used.
     */
    referrer?: string;
    /**
     * Server (dxtrade).
     */
    server?: 'demo' | 'real';
    /**
     * The service(s) to retrieve token(s) for.
     */
    service:
        | ('onfido' | 'sendbird' | 'banxa' | 'wyre' | 'dxtrade' | 'ctrader')
        | ('onfido' | 'sendbird' | 'banxa' | 'wyre')[];
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field. Maximum size is 3500 bytes.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface ServiceTokenResponse extends GenericResponse<'service_token'> {
    /**
     * Service specific tokens and data.
     */
    service_token?: {
        /**
         * Banxa order data.
         */
        banxa?: {
            /**
             * Created order id reference token.
             */
            token?: string;
            /**
             * Banxa order checkout url.
             */
            url?: string;
            /**
             * Banxa order checkout iframe url.
             */
            url_iframe?: string;
        };
        /**
         * CTrader data.
         */
        ctrader?: {
            /**
             * CTrader One Time token
             */
            token?: string;
        };
        /**
         * Deriv X data.
         */
        dxtrade?: {
            /**
             * Deriv X login token.
             */
            token?: string;
        };
        /**
         * Onfido data.
         */
        onfido?: {
            /**
             * Onfido token.
             */
            token?: string;
        };
        /**
         * Sendbird data.
         */
        sendbird?: {
            /**
             * Sendbird application ID.
             */
            app_id?: string;
            /**
             * The epoch time in which the token will be expired. Note: the token could be expired sooner than this, due to different reasons.
             */
            expiry_time?: number;
            /**
             * Sendbird token.
             */
            token?: string;
        };
        /**
         * Wyre reservation data.
         */
        wyre?: {
            /**
             * Wyre reservation id token
             */
            token?: string;
            /**
             * Wyre reservation URL
             */
            url?: string;
        };
    };
}
export interface TradingPlatformLeverageRequest {
    /**
     * Must be `1`
     */
    trading_platform_leverage: 1;
    /**
     * Name of trading platform.
     */
    platform: 'mt5' | 'dxtrade' | 'ctrader';
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field. Maximum size is 3500 bytes.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface TradingPlatformLeverageResponse extends GenericResponse<'trading_platform_leverage'> {
    /**
     * dynamic leverage data.
     */
    trading_platform_leverage: {
        leverage: {
            [U in 'stock_indices' | 'forex' | 'metals' | 'cryptocurrencies']: {
                display_name: string;
                instruments: string[];
                min: number;
                max: number;
                volume: {
                    unit: string;
                    data: {
                        from: number;
                        to: number;
                        leverage: number;
                    }[];
                };
            };
        };
    };
}

export interface TradingPlatformNewAccountRequest {
    /**
     * Must be `1`
     */
    trading_platform_new_account: 1;
    /**
     * Account type.
     */
    account_type: 'demo' | 'real';
    /**
     * [Optional]
     */
    company?: string;
    /**
     * [Optional] Trading account currency, the default value will be the qualified account currency.
     */
    currency?: string;
    /**
     * [Optional] If set to 1, only validation is performed.
     */
    dry_run?: 0 | 1;
    /**
     * Market type
     */
    market_type: 'financial' | 'synthetic' | 'all';
    /**
     * The master password of the account. For validation (Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address). Only for DXTrade.
     */
    password?: string;
    /**
     * Name of trading platform.
     */
    platform: 'dxtrade' | 'ctrader';
    /**
     * [Optional] Sub account type.
     */
    sub_account_type?: 'financial' | 'financial_stp' | 'swap_free';
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field. Maximum size is 3500 bytes.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface TradingPlatformNewAccountResponse extends GenericResponse<'trading_platform_new_account'> {
    /**
     * New Trading account details
     */
    trading_platform_new_account: {
        /**
         * ID of Trading account.
         */
        account_id: string;
        /**
         * Account type.
         */
        account_type: 'demo' | 'real' | 'all';
        /**
         * Agent Details.
         */
        agent: null | string;
        /**
         * Balance of the Trading account.
         */
        balance: number;
        /**
         * Currency of the Trading account.
         */
        currency: string;
        /**
         * Account balance, formatted to appropriate decimal places.
         */
        display_balance: string;
        /**
         * Account enabled status
         */
        enabled: number;
        /**
         * Landing company shortcode of the Trading account.
         */
        landing_company_short: 'bvi' | 'labuan' | 'malta' | 'maltainvest' | 'svg' | 'vanuatu' | 'seychelles';
        /**
         * Login name used to log in into Trading platform.
         */
        login: string;
        /**
         * Market type.
         */
        market_type: 'financial' | 'synthetic' | 'all';
        /**
         * Name of trading platform.
         */
        platform: 'dxtrade' | 'derivez' | 'ctrader';
        /**
         * Sub account type.
         */
        sub_account_type: 'financial' | 'financial_stp' | 'swap_free';
    };
}

export interface TradingPlatformPasswordChangeRequest {
    /**
     * Must be `1`
     */
    trading_platform_password_change: 1;
    /**
     * New trading password. Accepts any printable ASCII character. Must be within 8-25 characters, and include numbers, lowercase and uppercase letters. Must not be the same as the user's email address.
     */
    new_password: string;
    /**
     * Old password for validation. Must be empty if a password has not been set yet.
     */
    old_password?: string;
    /**
     * Name of trading platform.
     */
    platform: 'dxtrade' | 'mt5';
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field. Maximum size is 3500 bytes.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface TradingPlatformPasswordChangeResponse extends GenericResponse<'trading_platform_password_change'> {
    trading_platform_password_change?: 0 | 1;
}

export interface TradingPlatformWithdrawalRequest {
    /**
     * Must be `1`
     */
    trading_platform_withdrawal: 1;

    /**
     * Amount to withdraw (in the currency of the Trading account).
     */
    amount: number;

    /**
     * Trading account login to withdraw money from.
     */
    from_account: string;

    /**
     * Name of trading platform.
     */
    platform: 'dxtrade' | 'derivez' | 'ctrader';

    /**
     * Wallet account loginid to transfer money to.
     */
    to_account: string;

    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface TradingPlatformWithdrawalResponse extends GenericResponse<'trading_platform_withdrawal'> {
    /**
     * Information about withdrawal transaction
     */
    trading_platform_withdrawal: {
        /**
         * The reference number for the related withdrawal from the wallet account
         */
        transaction_id: number;
    };
}

export interface WalletMigrationRequest {
    /**
     * Wallet migration action.
     */
    wallet_migration: 'state' | 'start' | 'reset';

    /**
     * [Optional] The login id of the user. If left unspecified, it defaults to the initial authorized token's login id.
     */
    loginid?: string;

    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };

    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface WalletMigrationResponse {
    /**
     * The information regarding wallet migration state.
     */
    wallet_migration: {
        /**
         * It contains plan of migration with all accounts that are going to be created and linked to existing accounts.
         */
        account_list?: {
            /**
             * The category of the account.
             */
            account_category: string;
            /**
             * The type of the account.
             */
            account_type: string;
            /**
             * The currency of the account.
             */
            currency: string;
            /**
             * The landing company short code of the account.
             */
            landing_company_short: string;
            /**
             * The list of accounts that will be linked to this wallet account.
             */
            link_accounts: {
                /**
                 * The category of the account.
                 */
                account_category: string;
                /**
                 * The type of the account.
                 */
                account_type: string;
                /**
                 * The loginid of the account.
                 */
                loginid: string;
                /**
                 * The platform of the account.
                 */
                platform: string;
            }[];
            /**
             * The platform of the account.
             */
            platform: string;
        }[];
        /**
         * Current state of migration process.
         */
        state: {
            description: string;
            type: string;
            enum: string[];
        };
    };
}

export interface TradingPlatformProductListingRequest {
    /**
     * Must be `1`
     */
    trading_platform_product_listing: 1;
    /**
     * [Optional] Specific application `app_id`.
     */
    app_id?: string[];
    /**
     * Country of legal citizenship, 2-letter country code.
     */
    country_code: string;
    /**
     * [Optional] Used to pass data through the websocket, which may be retrieved via the `echo_req` output field.
     */
    passthrough?: {
        [k: string]: unknown;
    };
    /**
     * [Optional] Used to map request to response.
     */
    req_id?: number;
}

export interface TradingPlatformProductListingResponse extends GenericResponse<'trading_platform_product_listing'> {
    /**
     * Containing Trading product objects.
     */
    trading_platform_product_listing?: {
        /**
         * Platform product listing.
         */
        [key: number]: {
            /**
             * Available markets for country.
             */
            available_markets?: string[];
            /**
             * Available trade types for country.
             */
            available_trade_types?: string[];
            /**
             * Name of trading platform.
             */
            name?: string;
            /**
             * Available product for the Trading Platform.
             */
            product_list?: {
                /**
                 * Available account types for this asset symbol.
                 */
                available_account_types?: string[];
                /**
                 * Available trade types for this asset symbol.
                 */
                available_trade_types?: string[];
                /**
                 * Information for a market.
                 */
                market?: {
                    /**
                     * Display name of the market.
                     */
                    display_name?: string;
                    /**
                     * Internal name of the market..
                     */
                    name?: string;
                };
                /**
                 * Information for submarket.
                 */
                submarket?: {
                    /**
                     * Display name of the submarket.
                     */
                    display_name?: string;
                    /**
                     * Internal name of the submarket.
                     */
                    name?: string;
                };
                /**
                 * Information for underlying symbol.
                 */
                symbol?: {
                    /**
                     * Display name of the underlying symbol.
                     */
                    display_name?: string;
                    /**
                     * Internal name of the underlying symbol.
                     */
                    name?: string;
                };
            }[];
        };
    };
}
